--- # Install aws cli
- hosts: localhost
  connection: local 
  become: true
  become_user: cloud_user  #TODO: por variable
  tasks:
  - name: Install curl
    apt:
      name:
      - curl
      - unzip
      state: latest
  tasks:
  - name: Download aws-cli.zip
    get_url:
      url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
      dest: ./awscliv2.zip
      owner: cloud_user
      group: cloud_user
      mode: 555
    get_url:
      url:  # required. HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
      dest:  # required. Absolute path of where to download the file to. If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect. If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) option), but replaced only if the contents changed..
      tmp_dest:  # not required. Absolute path of where temporary file is downloaded to. When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value. U(https://docs.python.org/2/library/tempfile.html#tempfile.tempdir)
      force: False # not required. If C(yes) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(no), the file will only be downloaded if the destination does not exist. Generally should be C(yes) only for small local files. Prior to 0.6, this module behaved as if C(yes) was the default. Alias C(thirsty) has been deprecated and will be removed in 2.13.
      backup: False # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      sha256sum:  # not required. If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. This option is deprecated. Use C(checksum) instead.
      checksum:  # not required. If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum="sha256:D98291AC[...]B6DC7B97", checksum="sha256:http://example.com/path/sha256sum.txt" If you worry about portability, only the sha1 algorithm is available on all platforms and python versions. The third party hashlib library can be installed for access to additional algorithms. Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted.
      use_proxy: True # not required. if C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.
      validate_certs: True # not required. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
      timeout: 10 # not required. Timeout in seconds for URL request.
      headers:  # not required. Add custom HTTP headers to a request in hash/dict format. The hash/dict format was added in Ansible 2.6. Previous versions used a C("key:value,key:value") string format. The C("key:value,key:value") string format is deprecated and will be removed in version 2.10.
      url_username:  # not required. The username for use in HTTP basic authentication. This parameter can be used without C(url_password) for sites that allow empty passwords. Since version 2.8 you can also use the C(username) alias for this option.
      url_password:  # not required. The password for use in HTTP basic authentication. If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used. Since version 2.8 you can also use the 'password' alias for this option.
      force_basic_auth: False # not required. Force the sending of the Basic authentication header upon initial request. httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail.
      client_cert:  # not required. PEM formatted certificate chain file to be used for SSL client authentication. This file can also include the key as well, and if the key is included, C(client_key) is not required.
      client_key:  # not required. PEM formatted file that contains your private key to be used for SSL client authentication. If C(client_cert) contains both the certificate and key, this option is not required.
      http_agent: ansible-httpget # not required. Header to identify as, generally appears in web server logs.
      mode:  # not required. The permissions the resulting file or directory should have. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.6, the mode may also be the special string C(preserve). When set to C(preserve) the file will be given the same permissions as the source file.
      owner:  # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      group:  # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      seuser:  # not required. The user part of the SELinux file context. By default it uses the C(system) policy, where applicable. When set to C(_default), it will use the C(user) portion of the policy if available.
      serole:  # not required. The role part of the SELinux file context. When set to C(_default), it will use the C(role) portion of the policy if available.
      setype:  # not required. The type part of the SELinux file context. When set to C(_default), it will use the C(type) portion of the policy if available.
      selevel: s0 # not required. The level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). When set to C(_default), it will use the C(level) portion of the policy if available.
      unsafe_writes: False # not required. Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner. This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      attributes:  # not required. The attributes the resulting file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr). The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
  tasks:
  - name: unzip aws-cli.zip
    unarchive:
      src: ./awscliv2.zip
      dest:  .
      